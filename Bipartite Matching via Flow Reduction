from collections import deque, defaultdict

class BipartiteMatching:
    def __init__(self, U, V, edges):
        self.U = U
        self.V = V
        self.graph = defaultdict(list)
        self.capacity = defaultdict(int)
        self.build_graph(edges)

    def build_graph(self, edges):
        for u in self.U:
            self.graph['s'].append(u)
            self.graph[u].append('s')
            self.capacity[('s', u)] = 1

        for v in self.V:
            self.graph[v].append('t')
            self.graph['t'].append(v)
            self.capacity[(v, 't')] = 1

        for u, v in edges:
            self.graph[u].append(v)
            self.graph[v].append(u)
            self.capacity[(u, v)] = 1

    def bfs(self, parent):
        visited = set()
        queue = deque(['s'])
        visited.add('s')
        while queue:
            u = queue.popleft()
            for v in self.graph[u]:
                if v not in visited and self.capacity.get((u, v), 0) > 0:
                    visited.add(v)
                    parent[v] = u
                    if v == 't':
                        return True
                    queue.append(v)
        return False

    def max_flow(self):
        parent = {}
        flow = 0
        while self.bfs(parent):
            path_flow = float('inf')
            v = 't'
            while v != 's':
                u = parent[v]
                path_flow = min(path_flow, self.capacity[(u, v)])
                v = u
            flow += path_flow
            v = 't'
            while v != 's':
                u = parent[v]
                self.capacity[(u, v)] -= path_flow
                self.capacity[(v, u)] += path_flow
                v = u
        return flow

# Test
U = ['A', 'B']
V = ['1', '2']
edges = [('A', '1'), ('A', '2'), ('B', '2')]
matcher = BipartiteMatching(U, V, edges)
print("Maximum Matching:", matcher.max_flow())
